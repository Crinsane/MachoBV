// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.machobv.models;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import nl.machobv.models.City;
import nl.machobv.models.Route;

privileged aspect Route_Roo_Finder {
    
    public static Long Route.countFindRoutesByOriginAndDestination(City origin, City destination) {
        if (origin == null) throw new IllegalArgumentException("The origin argument is required");
        if (destination == null) throw new IllegalArgumentException("The destination argument is required");
        EntityManager em = Route.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Route AS o WHERE o.origin = :origin AND o.destination = :destination", Long.class);
        q.setParameter("origin", origin);
        q.setParameter("destination", destination);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Route> Route.findRoutesByOriginAndDestination(City origin, City destination) {
        if (origin == null) throw new IllegalArgumentException("The origin argument is required");
        if (destination == null) throw new IllegalArgumentException("The destination argument is required");
        EntityManager em = Route.entityManager();
        TypedQuery<Route> q = em.createQuery("SELECT o FROM Route AS o WHERE o.origin = :origin AND o.destination = :destination", Route.class);
        q.setParameter("origin", origin);
        q.setParameter("destination", destination);
        return q;
    }
    
    public static TypedQuery<Route> Route.findRoutesByOriginAndDestination(City origin, City destination, String sortFieldName, String sortOrder) {
        if (origin == null) throw new IllegalArgumentException("The origin argument is required");
        if (destination == null) throw new IllegalArgumentException("The destination argument is required");
        EntityManager em = Route.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Route AS o WHERE o.origin = :origin AND o.destination = :destination");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Route> q = em.createQuery(queryBuilder.toString(), Route.class);
        q.setParameter("origin", origin);
        q.setParameter("destination", destination);
        return q;
    }
    
}
