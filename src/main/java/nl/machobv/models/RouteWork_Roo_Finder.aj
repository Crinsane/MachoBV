// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.machobv.models;

import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import nl.machobv.models.City;
import nl.machobv.models.RouteWork;

privileged aspect RouteWork_Roo_Finder {
    
    public static Long RouteWork.countFindRouteWorksByOriginAndDestinationAndStart_atLessThanEqualsAndEnd_atGreaterThanEquals(City origin, City destination, Date start_at, Date end_at) {
        if (origin == null) throw new IllegalArgumentException("The origin argument is required");
        if (destination == null) throw new IllegalArgumentException("The destination argument is required");
        if (start_at == null) throw new IllegalArgumentException("The start_at argument is required");
        if (end_at == null) throw new IllegalArgumentException("The end_at argument is required");
        EntityManager em = RouteWork.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM RouteWork AS o WHERE o.origin = :origin AND o.destination = :destination AND o.start_at <= :start_at  AND o.end_at >= :end_at", Long.class);
        q.setParameter("origin", origin);
        q.setParameter("destination", destination);
        q.setParameter("start_at", start_at);
        q.setParameter("end_at", end_at);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<RouteWork> RouteWork.findRouteWorksByOriginAndDestinationAndStart_atLessThanEqualsAndEnd_atGreaterThanEquals(City origin, City destination, Date start_at, Date end_at) {
        if (origin == null) throw new IllegalArgumentException("The origin argument is required");
        if (destination == null) throw new IllegalArgumentException("The destination argument is required");
        if (start_at == null) throw new IllegalArgumentException("The start_at argument is required");
        if (end_at == null) throw new IllegalArgumentException("The end_at argument is required");
        EntityManager em = RouteWork.entityManager();
        TypedQuery<RouteWork> q = em.createQuery("SELECT o FROM RouteWork AS o WHERE o.origin = :origin AND o.destination = :destination AND o.start_at <= :start_at  AND o.end_at >= :end_at", RouteWork.class);
        q.setParameter("origin", origin);
        q.setParameter("destination", destination);
        q.setParameter("start_at", start_at);
        q.setParameter("end_at", end_at);
        return q;
    }
    
    public static TypedQuery<RouteWork> RouteWork.findRouteWorksByOriginAndDestinationAndStart_atLessThanEqualsAndEnd_atGreaterThanEquals(City origin, City destination, Date start_at, Date end_at, String sortFieldName, String sortOrder) {
        if (origin == null) throw new IllegalArgumentException("The origin argument is required");
        if (destination == null) throw new IllegalArgumentException("The destination argument is required");
        if (start_at == null) throw new IllegalArgumentException("The start_at argument is required");
        if (end_at == null) throw new IllegalArgumentException("The end_at argument is required");
        EntityManager em = RouteWork.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM RouteWork AS o WHERE o.origin = :origin AND o.destination = :destination AND o.start_at <= :start_at  AND o.end_at >= :end_at");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<RouteWork> q = em.createQuery(queryBuilder.toString(), RouteWork.class);
        q.setParameter("origin", origin);
        q.setParameter("destination", destination);
        q.setParameter("start_at", start_at);
        q.setParameter("end_at", end_at);
        return q;
    }
    
}
